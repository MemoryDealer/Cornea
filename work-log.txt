#Two weeks prior
-Got basic framework working.
-Got first person camera working(still needs forwards vector for movement optimization).
-Added paged geometry (will be used for grass and plants).
-Enabled polygon level collision detection with MOC.
-Added CEGUI functionality.
-Added DotSceneLoader feature.

#8/2/12
-Tested out raptor chasing of camera with simple static model.
-Configured Blender to export .mesh models.

#8/3/12
-Changed trees to use manual entities and nodes rather than paged geometry.
-Added rain effect.
*Fixed camera shakiness/jerkiness(input lag I guess) by removing the time inject on the rotation scale, since it's a relative value anyway.
	Changed to m_rotateScale = m_rotateSpeed / 100; from m_rotateScale = m_rotateSpeed * evt.timeSinceLastFrame;
	Also added needUpdate() call to each camera node after translation
-Changed camera's zfar clipping distance from 50,000 to 600 and set viewport's background to white. This with stops the frame rate drop when 
	getting farther away from a complex mesh, and fog covers it up. Still needs research, on mesh swapping or similar to do it without fog. 

#8/4/12
-Added water plane.
-Fixed DotSceneLoader error when loading multiple scenes by removing "camera" node from the actual .scene file. 
	I will have to manually remove them after it's been generated, or find an option in Blender.

#8/6/12
-Got a basic texture shader working.
-Made the rendering function update the mouse twice, I believe this reduced the mouse lag a little. Still needs testing/research.

#8/16/12
-Turns out that updating the keyboard/mouse multiple times in the render function caused frame skipping. I now update them only once at the 
	beginning of the loop.

#8/17/12
-Added compositor class and tested with motion blur, night vision, and ASCII compositors.

#8/18/12
-Created camera class for easier, more organized management. Had strange compilation errors at first due to including App.hpp in the camera header,
	thus inducing a circular infinite include mess. Fixed now.

#9/2/12
-Still frame skipping issues, don't know what's causing it. 
-In the update keyboard/mouse functions in App.cpp, I removed the Base class function call and placed the code in the function. This seems to have
	fixed the frame skipping problem...for now. 

#9/6/12
-I think I may have fixed the frame skipping issue finally, but not for certain. I rearranged some of the camera code so now it is very smooth (removed time step in acceleration). 
	The velocity vector may need to be transformed by the timeElapsed at the end before the camera is moved as well, not for sure though. I also implemented the setFrameSmoothingPeriod()
	function in Base.cpp. 
*I need to move away from the frameRenderingQueued function and write my own loop instead. 

#9/9/12
-Added state management system, not functional yet. Will take debugging.

#9/10/12
-Got the app state system working, switches between menu and game state. Will need to add a pause state, and figure out how to design the campaign system. 
	There was an error where it would fail to switch after 3 times, due to not unloading the compositor--I found out by checking the log. 
-Added camera tracking for main menu.
-Got MyGUI working.

#9/11/12
-Misc. clean up of MyGUI code, still having crash when app closes due to OgrePlatform::shutdown().

#9/12/12
-Had to put the bulletdynamics.lib first in the linker for bullet to work properly. 
-Got Bullet Physics working! This page helped a great deal: http://gamedev.stackexchange.com/questions/19019/ogre-3d-and-bullet-physics-interaction
-Added mesh collision detection (static objects only), turns out you shouldn't call the calculateLocalInertia() function on the shape, or it crashes. Could be for another reason, however.
-Moved all bullet objects to base class for better architecture.

#9/14/12
-Got forces working in Bullet. The use of applyCentralImpulse provides a consistent movement. 

#9/15-16/12
-Been messing around with collision detection. Created a collision demo which functions just like MOC did at this point. Still need to achieve the "sliding" effect
	when walking along walls. 

#9/17/12
-Got nice first person collision detection working, using a btRigidBody and allow the world to do the physics for me. :)

#9/18/12
-Tested out exporting a Blender level for use with collision detection. Didn't work at first, I had to get a child node iterator for the node loaded by the DotSceneLoader,
	and translate the child nodes one by one in a for loop. If you translate it directly, it doesn't work. 
-Integrated SkyX into the game. It looks very nice, only thing is the sunDirection vector seems to be in reverse, I have to use getMoonDirection() instead.

#9/20/12
-Was having problems exporting .scene files from Blender properly--the origin seems to be reset when each mesh is added one by one. To fix this, I translated an object
	while in edit mode in blender, rather than object mode. The origin did not move with the object, but I guess that's how it's supposed to be. 
-It's important to keep the origin of all objects in the same place, otherwise they will be misplaced when loaded into Ogre. It's best to keep the origins at the center,
	using Object->Snap->Cursor to Center and Object->Transform->Origin to 3D Cursor.

#9/22/12
-Ray testing now works in Bullet, I just have to figure out how to implement a proper character controller now.
-I have finally gotten a proper first person camera working with full collision detection. The solution was to call applyCentralImpulse instead of translating it. To limit
	the velocity, simply check the magnitude of the linear velocity vector before the camera is moved, and stop the movement if it's past the max. 
The character controller still must be optimized for mass, friction, size of capsule, etc. To figure this out I should really just make modifiers with keyboard shortcuts 
	and display the values with a GUI to determine the optimal settings. 

#9/23/12
-The camera seems to run into small invisible objects and bounces off of them, or stops completely. It seems that increasing the weight of the camera's body helps. 

#9/24/14
-I've pretty much gotten the camera done. The damping, friction, mass, and movement speed are all changeable for better optimization, but these seem to be the best settings:
	Mass: 6.0, Friction: 1.0, Damping: 0.3, translate *= 2.5; 
-The pitch is limited to 80 degrees now, I had to add/subtract 0.115 to the x value of the orientation quaternion that's applied. 
-Also, the forwards vector has been calculated correctly, only thing is that I'm using a kind of cheap hack (IMO), by dividing the x and z values of the translate vector
	by the y-value of the forwards vector. The keeps it going at the same speed regardless of pitch. But it allows the camera to climb steep inclines by looking straight down 
	and moving horizontally. This was temporarily solved by applying the 80 degrees pitch limit. 
-Integrated FMOD into project. Pretty straightforward. To infinitely loop a single sound, pass the FMOD_LOOP_NORMAL in the flags of System::createSound().

#9/25/12
-Been experimenting with Blender as a level editor. 
-The texture image file name must not contain spaces in the .material script. 
-Built a demo maze which works quite well. There is flickering on the textures as the sun moves, however, it must be fixed. Editing the .material files may help.
* I can climb walls and jump in the air, change the jump to detect if the player is above the ground or not first by casting a ray. If the player is above, prevent jumping.
TODO: Add NPC class, Weapon class, and create concept for "floating island in the sky" which will traverse the realms like in Gauntlet. 
	TAKE THE SPIDER OUTSIDE. 

#9/26/12
-I can repeat a seamless texture along walls by adding this line in the .material script under texture_unit: "scale 0.2 0.2" - which would repeat it five times. Just 
	divide 10 by the scale number to know how many times it will be repeated. 

#9/27/12
-It turns out using the Octree scene manager is as simple as passing "OctreeSceneManager" into the first argument of m_pRoot->createSceneManager().

#9/30/12
-I've created a brand new project and added previous files that I needed. This will be for a clean game framework, and I've started concept development for "Maze Monster."
-The camera has been reprogrammed to include the Bullet rigid body within its own class, for better organization.

#10/1/12
-If there is a run-time error when entering a state, it's because you forgot to add it to the states in App.cpp.
-When exiting the game state and starting again, the physics run slower. Figure out how to properly remove all physics objects when the state is exited. 
	Note: This seems to only happen in debug mode.
-The extreme frame rate drop in certain areas only occurs in debug mode. It appears all is fine in release mode, though further testing must ensure this.

#10/2/12
-I got an idea for a platforming game, where you have different suits/boots, which give you different jumping abilities. One gives you the ability to jump far distances forward/backward, 
	and another to jump heights. I think this may be the core component of my first game. There are double-jump upgrades, which can be used to go back to earlier levels
	and go to previously unaccessible locations, and they are required to progress in the current levels. Gravity boots for space level.
	-Velocity boots: first set the player gets, allows fast x-z jumping.
	-There a portals/zones which you can't pass through without wearing normal boots.
	-Like Rayman 2, you can shoot glowing balls, and enemies pop out from places occasionally, like the pirates.
	-Boots that allow you to fall great distances without taking damage.

-Optimal settings for velocity boots:
	Mass: 6.0
	Divider: 12.0
	Divider2: 1024.0
	m_translateVector *= 2.5
TODO *** Need to fix the bug where the player gets "glued" to the walls after jumping at them.
TODO: Work on designs for a "Boot/Power" class, and NPC as well as World Object(with scene node and entity members) class. 

#10/3/12
-Made Boots class and implemented it into the camera class jumping controls. I will now easily be able to switch between boots.
-Optimized the jumping code to prevent "cheat" moving after jumping straight up. The player can also move in the air when falling or after a jump.
	Still need to optimize code for falling down after a jump, as of now, the gravity is increased back to normal and it looks acceptable. 

#10/4/12
-Added debug configuration for boots and editable options at run-time. Here are some configurations:

---

// Most realistic
XZ: 2.50
Y: 450.0
A: 0.06
G: -5.10

// Good, by XZ movement a bit too far
XZ: 3.0
Y: 400.0
A: 0.07
G: -5.50

// Forms a near-perfect arc, great default 
XZ: 2.50
Y: 450.0
A: 0.08
G: -5.00

---

Velocity Boots (not quite, close):
XZ: 2.50
Y: 450.0
A: 0.18
G: -4.50
// should remove resetting gravity after reaching jump height again

Best So Far:
XZ: 3.50
Y: 500.0
A: 0.18
G: -4.00

// glitchy when jumping sometimes, perhaps due to gravity changing back to normal at the wrong time. 
// This happens with the above when gravity is lowered as well, so it's the gravity causing it.
XZ: 2.50
Y: 350.0
A: 0.06
G: -3.50

XZ: 3.50
Y: 450.0
A: 0.12
G: -3.50

---

"High-jump" boots:
XZ: 2.50
Y: 2500.0
A: 0.05
G: -8.80

---

#10/6/12
-Testing out "high-jump" boots, it seems I will have to allow air movement all the time with them, otherwise they are obstreperous. 
	They must not be able to move farther than the velocity boots, preferrably a good bit less than them.
	X movement must be nerfed.
-Made weapon class, and derived a class for a test weapon(MLP). I'm rendering my own model, the offset for the weapon can be determined at runtime by using
	the arrow keys and +/- keys to move it. I added a fire animation, which should also be customized to a vector for each weapon. 
	Next, I must create a player class, which will contain everything (perhaps the boots as well), like the weapon, health, armour, etc. Remember to keep as little
	code as possible in the actual state file. A particle class must also be created for firing projectiles--so perhaps a vector of projectile classes in the weapon class. 
-Make EventManager abstract class, and derive a child class for each level. This will test for events within the level.

#10/7/12
-Added player class. Perhaps passing a reference to timeSinceLastFrame would improve performance if needed, there are quite a few copies being passed.
-Added Projectile class. This is giving me trouble. The coordinates are screwed up or something.
-Turns out the problem was due to setting the light and billboardset position in addition to the scene node's position for the particle. Only set the scene node, and set
	the billboardset to (0, 0, 0).
-I put the camera inside the player class, which I believe (along with other adjustments today) improved the performance, as far as FPS. 
-I think it would be beneficial to remove the EnvironmentManager class for now and put the projectile vector in the Player class. Later, the EnvironmentManager
	will be replaced with the EventManager class, which is for events in the world(e.g. doors, switches, elevators, etc.). 

#10/8/12
-Calling getPosition() on a child node will not get the actual position. You must call _getDerivedPosition().
-To get the normal of a collision ray: normal = (characterPos - collisionPos).normalise();
-I was trying to delete an Ogre::Light pointer after destroy it with the scene manager, this caused a crash. The pointer is freed automatically when destroyed. 
-Created EventManager class and ProjectileManager class as part of it. The projectiles are managed by a vector container, and tested each frame for being alive or dead. 
	Collision for the projectiles must be added later. I think a contactTest with Bullet would be the best solution.
-The camera class now has a getDirection() function which multiplies the yaw orientation by the pitch orientation by a unit vector (0, 0, -1). 

#10/13/12
-Changed the jump function to decrement the gravity in small steps each frame rather than just set the gravity back to normal instantly. 
-When setting the player's weapon to none, it crashes in the camera update function--fix.

#10/14/12
-For determining the projectile collisions, perhaps cast a Bullet ray each frame in the direction of the projectile, and test the distance, rather than creating a rigid body
	for each one. 
-If there is an error complaining about a parameter not getting aligned you probably need to pass a reference to the parameter rather than a copy.
	(formal parameter with __declspec(align('16')) won't be aligned)
-I've implemented the raycasting solution for testing projectile collisions, however the distance determined seems to vary, so I'll have to transform some of the 
	values accordingly. When the projectiles are faster, the minimum collision distance will have to be higher as well, it seems. 
-I solved the problem with the projectiles going too fast and missing the ray cast tests. Each frame, in the EventManager, I simply added a for loop which repeats
	so many times based on the projectile's velocity. This allows the projectile to move multiple times per frame(at seemingly no visual cost) and test for collisions
	more often. The collisionDistance variable may need testing still, but this works about perfectly for stopping the projectile once it's hit a world object. Brilliant!
-So to test if it's damaging a NPC, cast an Ogre ray once it has collided, and check the collision flags on the entity, if so, send damage to the NPC class.

#10/15/12
-Fixed the weapon to not be clipped by the walls it ran into. This is done by making the material script run two passes. In the first pass, colour_write is off 
	and depth_write on, and depth_func is always_pass. In the second pass, all that's needed is for colour_write to be on. 
	
#10/18/12
-Changed the weapon class to include a pointer to a projectile manager, which is set by setProjectileManager() in the GameState enter() function. The projectile manager
	is still created within the EventManager, however its pointer is grabbed and passed to the weapon. This makes the firing code in the mouse click much smaller, as 
	there is no need to create a new PROJECTILE_DATA struct and retrieve the weapon's data--it's all done from within the Weapon class now. Perhaps, a projectile manager
	for the player and one for all other NPCs is what's needed.

#10/29/12
-Modified the jumping code to be completely frame rate independent. The air movement needs to be transformed by the timeSinceLastFrame variable, and it would be incorrect
	to transform the original jump force by the elapsed time. 

#10/30/12
-When resuming the MenuState, it appears the scene manager is still null from being deleted in the exit() function by the GameState. This prevents the GUI platform from
	being able to set the scene manager.
-Fixed the MyGUI problem. Turns out that if you destroy a scene manager while it's still attached to the MyGUI render manager, it causes problems like above. So, before
	destroying the scene manager, you must call setSceneManager(nullptr) on the platform's render manager (this is now done in the destroyGUI() function). 
	For managing the GUI between states, I am creating/destroying it each time the state is entered, paused, resumed, or exited. 

#11/9/12
-Added DynamicObject class and DynamicObjectManager which is updated through the EventManager (it is a class member). The DynamicObject class has a scene node for Ogre
	and a btCollisionObject for Bullet. The Ogre updating works fine but I still need to figure out how to properly update the Bullet world for collision objects. One 
	way this could be done is to instead use rigid bodies and set the activation state to ISLAND_SLEEPING. I first wish to see if it's possible using only collision
	objects, however.
-Added a feature which detects the name of a scene node upon being added to the physics world and if it matches a string it will make it a dynamic object and add it to 
	the stack in the dynamic object manager, where it will be updated each frame. 
-The DyamicObject class is abstract and each type of object will inherit its features, making it easy to keep track of the different types of dynamic objects. Types I 
	plan to implement: door, elevator, helicopter, button, lever, etc.

#11/10/12
-Fixed the Bullet issue. Turns out I just need to create a btTransform from the scene node's position and call setWorldTransform on the collision object. Then the AABB
	must be updated by calling updateSingleAabb() on m_btWorld with the collision object pointer as the parameter. This is done in the abstract class DynamicObject, in
	the update function.
-I am faced with the problem that the player does not move with the platform when it moves. It seems I should use a kinematic object, but I have tried unsuccessfully. 

#11/14/12
-Tried to make the kinematic platform work with no success. 
-Added BtOgre and enabled the debug drawing feature. 

#11/15/12
-Moved the registerAsColliders functions to the BtOgre files. I have removed the old files that contain the functions.
-Finally made a moving platform that carries the player. I had to add an entirely new rigid body and update the world transform on the rigid body itself and its motion	
	state. It has to be kinematic and the activation state must be DISABLE_DEACTIVATION. 
-Made a fool of myself on Ogre3D forums again: http://www.ogre3d.org/forums/viewtopic.php?f=8&t=75383
-Fixed the issue. I had to move the objects in Blender using object mode, and when the .scene file is loaded I can scale it using scene->setInheritScale(true); and 
	scene->scale(20.0, 20.0, 20.0); Also in the registerAllEntitiesAsColliders() function, I changed the btTransform for the collision object by modifying the 
	position, orientation, and scale to retrieve the derived values, which allows the .scene to be properly loaded without having to move objects in edit mode. 
-If MSVC starts generating 100+ random errors it's probably due to a circular include somewhere, I accidently include Base.hpp in itself including a file that included
	another file which was being included by Base.hpp and also through the heirarchy ended up including Base.hpp back. Tricky stuff. 
-After eight hours I've finally fixed this. Just took a lot of messing with the code. Now I must enable a "user data" type option to allow custom movements. 

#11/16/12
-Ranalyzing what I did yesterday: The scaling of the dotscene node changed a few things. On the child nodes of the scene I must use _getDerivedX() to retrieve the proper
	data. It's still not exactly clear why I must do it this way for the DynamicObject operations, but it works. The setInitialState() has to do with it, I believe it
	resets the local coordinate system for the node, and due to the animation the position relative to the parent is always zero. 
-Modified the DotSceneLoader to load data from the <animation /> element. The ANIMATION_DATA struct is now allocated on the heap and passed via pointer to the 
	setupAnimation() function and then freed by the DynamicObjectManager after it's done. Only drawback is you need to manually add the data to the .scene file
	which isn't that big of a deal. It would take too long to configure the Blender exporter to write animation data and is not really necessary at this point in time. 
-All that's needed to make an object animate is to precede it with the proper type ("MovingObject_" etc) and then add the animation element with the needed data,
	like so: 
	<animation length="10.0" step="2.5" divisor="2000.0" spline="false" numpos="5"
			pos0="0.0 0.0 0.0"
			pos1="100.0 0.0 0.0"
			pos2="100.0 100.0 0.0"
			pos3="25.0 75.0 0.0"
			pos4="0.0 0.0 0.0" />

#11/17/12
-Added featue to .scene file which allows you to put a placeholder in Blender to keep track of where a node animates to. The name should start with "Placeholder_" and
	it will be removed from the world in BtOgre.cpp (registerEntity...).
-Slipping on kinematic platforms may be due to the camera being a capsule with only one contact point. Could try updating the motion state of the capsule. Also,
	try changing the collision shape of the camera just to see. 
*Useful info: "You can use the SetCollisionShape function to change an object's shape at run-time for crouching. Also, you should look into the functions:
				btCollisionWorld::convexSweepTest
				btCollisionWorld::rayTest
				Both of those return the hit distance (called the "fraction") and a hit normal and hit position."
"I still believe you'd be better of using a sphere as a wheel below the player, else you'll be coding extra stuff to make the player not change direction while in mid-air etc."

#11/18/12
-TODO: Make a small program to write the .scene file to a binary file using a propreitary data structure which can then be used to parse the .scene file within the game.
-Tried changing the camera's body to a box and it did not fix the sliding. 
-It seems the kinematic platform works properly in debug draw mode. Weird. The frame rate would be influencing the correctness of the physics. 
-Setting vsync on fixes it, due to the frame rate being locked at 60. 

#11/19/12
-I've exhausted every attempt I can think of to solve this problem, nothing is working. I raised the friction which seems to help.
-The jittering could be caused by Ogre's automatic interpolation in the animation, i should try manually moving the object.

#11/20/12
-Tested it this morning and the jittering on 60fps is gone. I think it just had to do with system resource usage or something. 
-I was looking at the camera code and realized there's no reason to make the movement vector frame rate independent. This would in fact make the movement speed
	dependent on the frame rate. Strangely, though, with vsync on I walk slower on the platform when its friction is high, but normal with vsync off. 
-It's confusing me when in the jump code it requires a time step to be frame-rate independent in air movement when the normal movement requires there not to be a 
	time step for frame-rate independence. 
-I discovered I can retrieve a pointer to the collision object that's hit by a raycast, using this, I can get the velocity of the moving platform, and adjust the
	player's speed accordingly. 

#11/21/12
-An impulse is now applied to the player when on a platform. 

#11/28/12
-By calling m_pCamera->setAutoAspectRatio(true) after the camera is created, you can prevent the view being distorted when the resolution is in 16:9 format. 
-Setup player class to cast a ray forward when E is pressed. The scene node of the object hit can be retrieve as well as the distance to the object.
-The action() function now finds if the node is dynamic or not, by iterating through the dynamic object manager's list.
-Made an elevator which inherits MovingObject. It is animated like normal, I should change it to stop once it's hit one point of animation.
-Also created a Switch which inherits DynamicObject. This class holds a pointer to the DynamicObject it's linked to, and when the switch is activated, it sends
	the commmand to the linked object, thus activating the linked object. Good for doors/elevators etc.

#11/29/12
-Added a sound ability to the DynamicObject class, the Switch will play a sound when activated. 

#12/6/12
-Created the WarpGun, which allows the player to teleport to where the projectile is after it's fired. This of course is not the final design, however it's a 
	starting point for the concept. 

#12/7/12
-Added and test NPC class that uses lookAt() to track the player.

#12/8/12
-Added NPCManager and improved NPC class. It is loaded through the .scene file now and tracks the user by the location. Data will need to be loaded into the user any	
	pointer for use later. The NPCManager is in the EventManager and updated inside. 
-The Monster NPC is set to activate when the player is within range, I should add a separate function so the manager can check it before jumping to the update funciton. 
-Updated the update() function for DynamicObject to get the derived orientation and apply it to the transform as well. 

#12/9/12
-Added ability for NPCs to take damage from a ray weapon (which I also added today). The ray weapon has a pointer to the NPC manager and iterates through the NPCs to test
	if one of the matches the collision object that was hit. 

#12/10/12
-Solved the problem I was having yesterday with the ray casting for the ray weapon not always being straight from the camera. The solution was to acquire the target
	point like so: forwards = pos + (direction * range) instead of just (direction * range). That's all that's needed. :)
-Fixed a small segfault error in the NPCManager where the iterator was being incremented after a dead NPC was removed and the iterator moved to the next one. 

#12/11/12
-Added an EffectManager for particle systems to be added when the scene is loaded. The loading of these still needs to be implemented in the DotSceneLoader. 
-Created a WeaponEffects file with the ImpactManager and Impact class. This is for showing some kind of impact cloud where bullets hit. This could also be a texture
	that is rendered where the bullet landed, with a certain time for life or a maximum number of impacts. 

#12/12/12
-Created a muzzle flash effect. It repeats the same billboard texture with a little bit of a random offset. This can be improved by having 3 or 4 textures that are 
	randomly selected or iterated through to display the flash. At this point, it seems it would be best to just customize the programming for each weapon, as I don't
	plan on having a large enough amount of weapons to need some sort of automation. 
	Also, the muzzle flash moves quite a bit if the player is moving when firing. I will have to check other games to see how normal this is. 
-Fixed a number of other bugs.

#12/13/12
-Created a sound wrapper for FMOD which will be used for sound effects and music alike. 

#12/15/12
-Added a reticule using Ogre overlays. It can load a normal material and use the texture associated with it. 
-To blend a png file with a balck background, you must use add, and with a white background, src_alpha one_minus_src_alpha. 
-Added the ability for a reticule to change colour to red when it's over an enemy. This is done by calling a function in the main loop, updateUI(). This casts a ray	
	every single frame directly forward and tests if it hits an NPC, then checks if the NPC is friendly or not, and adjusts the reticule material accordingly. The needed
	material name is retrieved through the weapon pointer by getReticuleMaterialName(). 

#12/16/12
-To make a red reticule into a blue reticule, simply invert the colours in Paint.NET and adjust the luminosity levels. 
-Added ability for NPCs to animate, tested it with the basic robot. Each NPC's behaviour will be hard-coded into its own class. 
-Exported a BR from Blendswap and discovered the Blender2Ogre exporter creates a corrupt XML in this case. Not sure why, but the <user_data section is created only 
	with this blend and the quote marks are not properly escaped, even though the error is claimed to be fixed. I had to manually remove each user_data line to allow it
	to work. 
-It works much better to combine the blend file into a single mesh and export it. It loads faster as well. I forgot I needed to use radians to rotate it around so I ended up
	using pi/2 to move it the 90 degrees it needed. 
-Fixed the overlay element already exists error. 
-Finally fixed the error with crashing during the updateUI() function when casting a ray. Eventually I determined in my head that it was because the physics world was
	not being deleted each time the game state was exited. This created an error where sometimes the ray would hit the 'old' version of the collision object and there
	was no scene node in the user pointer since it was removed in the exit() function previously. 
	I added the code to remove all collision objects in the exit() function and it seems to be working. It did trigger the same error once after about the fifth time
	entering the game state when I was looking/shooting at the giant robot. I haven't since been able to reproduce the error. 

#12/17/12
-Got some shadows working. I used SHADOWTYPE_STENCIL_ADDITIVE, as well as modulative. For some reason only stencil shadows work and texture shadows don't. They also
	only currently work on the packaged .mesh files--I will need to edit the material scripts for the others. 
	Also, the Bullet meshes are disformed on the shadow casters when the shadow mode is set in the enter() function before everything. I solved this by setting the 
	shadows at the end of createScene(). Not entirely satisfied with this solution. 
-The randomization of the weapon flare was relative to the orientation of the player, thus it would be more off when looking in certain directions. 
-I changed the weapon flare billboard node to be the child of the weapon node itself. This way the flare moves with the weapon if the player is moving. This is how Halo 2
	does it. 
-By enabling shadows, when the game state is re-entered the collision meshes are reduced to a little ball. This only happens when the game state is restarted and shadows
	are enabled. 
-Loop to remove collision objects didn't get to zero, silly mistake. 
-It appears the generation of the edge list is causing the shadow errors on restart. 

#12/18/12
-It appears the error of meshes not reloading each state is due to the resource.
-Changed the shadows to use texture, doesn't have the Bullet problem.

#12/19/12
-I've got some depth shadow mapping working, but weird things happen. If I alt-tab out the shadows turn a blue-green colour and a random robot clear model appears at the origin. 
-Shadows will be the most challenging part of the graphics aspect. 
-There are some weird things going on with my shadow settings, I should consider resetting the scene basically to get these to work. I will do this next time. Changing the pixel
	format fixes some things and breaks others. It will just take experimenting to get these fixed. 

#12/20/12
-Finally got some very good shadows working using nullsquared's SSAO demo. It appears the shadows only work with spotlights, which is pretty much fine with me, because
	they look amazing. In any level/world there will only be one directional light anyway which will still affect the lighting of objects. Spotlights can be utilized as
	needed for shadows. 

#12/21/12   :O
-Maybe the reason the spotlight doesn't work properly on the dotscene loaded meshes is because of the scaling done in the xml file etc. 
-Perhaps the DotSceneLoader is the cause. Ogre should automatically normalise normals on scaling but it appears it's not with the .scene meshes, because I can set
	their scale to 1.0 in the xml file and the spotlight works fine. 
-If I scale the mesh itself (using edit mode in Blender) then the normals act fine under the spotlight. 
-If I am correct, scaling the meshes in edit mode will work fine with the way I've setup the scene loader and Bullet engine and dynamic objects etc.
-I've discovered a bug in which the elevator was added after the switch, so the link was never set, resulting in a segfault due to null pointer access. 
-I think it would be wise to use a separate function for loading the dynamic objects rather than integrating it within the BtOgre function. 

#12/23/12
-Created the function registerAllObjectsInScene() for the dynamic object manager. It was actually rather trivial--I've separated the objects into tiers, depending on their	
	order to be added in the world. Base items that don't depend on others are tier 1, such as MovingObjects, Elevators, etc. Tier 2 objects are dependent on a tier 1 object,
	such as Switches. Adding tier 2 objects after tier 1 ensures that the tier 2 object will be able to find its tier 1 object. 
*Fixed the problem with projectile weapons where projectiles would randomly make it through objects. This was done by instead casting the ray from the previous position
	to the current position. This eliminates the possibility of gaps in the ray casting.  

#12/27/12
-Added ability for muzzle flash to create a point light.
-Added a Settings class, which is a singleton. This will be used for the global game settings, such as graphics, controls, difficulty, etc. 
	The header Settings.hpp is included in stdafx.h since many files will probably be using its singleton. 

#12/28/12
-Added MeleeWeapons.hpp with Blade class and child Sword class. The attack animation will be done with an animation track like moving objects. 

#12/31/12
-Added swing animation for sword. I've learned a bit more about animations and why you need to call setInitialState() --due to the animated node being translated in a certain
	way. 
-The sword animation still needs to be fixed however, due to it repositioning itself once the animation has started.  

#1/3/13
-Made the weapon class use Ogre animations. Working good, however for specialized weapons that can't fire contiuously, I will just need to override the update() and fire(0
	functions completely. 

#1/6/13
-Fixed the lag spike when switching to the sword by preloading the mesh in GameState::enter(). This can be used for any mesh in the game as needed. 
-The strange issues with the orientation of the sword were solved by simply setting the default orientation to the identity quaternion. This is because of setInitialState()
	so the default orientation became (1, 0, 0, 0). 
-Fixed the issue with being able to trigger the animation too early on the warp gun. Trivial fix. 

#1/8/13
-Moved the ray firing code to rayAttack() in Weapon class. This reduces the redundancy of raycasting with ray weapons. 
-To solve the confusion between the constructor and init functions in the Weapon classes, the init function will only take care of aesthetic properties and animations.
-Cleaned up Projectile classes. It could still use some optimization, sometimes the frame rate drops significantly, but it may be due to debug mode and lights.  
-Added projectileAttack() and meleeAttack() in Weapon class. These should be used for every weapon as needed, except for very specialized weapons. 

#1/11/13
-Added getNegativeYNode() function to camera class, and a pointer to the camera in the EventManager (kind of messy?). This holds the scene node the player is standing on. 
	This can be used for the TriggerManager to activate player dependent triggers. 
-Added updateRays() to Camera, this replaces updateFooting(), and controls global rays to be used throughout, e.g. negative Y and Z rays. 

#1/13/13
-Modified the player action function to use the camera's negative Z raycast instead of casting another ray. 
-Added trigger manager, it it initialized in the EventManager. I am still figuring out how the trigger system will work. 

#1/14/13
-Removed the TriggerManager as it seemed unnecessary. Instead a Trigger is derived from DynamicObject and added as a tier 3 object. This way, any dynamic object can also
	be a trigger. I may need to modify the registerAllObjectsInScene to iterate through the entities rather than collision objects, since all triggers might not be
	collision objects. 
-Created a test trigger TriggerWalkOver which activates when the player walks over the space of the scene node. It works, now I just need to add an action, which perhaps
	could be a TriggerAction object that's created, or something. 
-The triggers are added by tokenizing the string and finding "Trigger.Condition" after "ObjectName." 

#1/15/13
-Changed ANIMATION_DATA to DYNAMIC_OBJECT_DATA which is retrieved again after it's set to acquire any trigger data.
-Tested a trigger case (loaded by .scene loader), which set the ambient light successfully and looped with a timeout timer as expected. 
-Had a strange debug assertion error with the iterator not being compatible when adding the animation positions to the animation track, due to calling memset() to 0 
	on the data pointer when it was initialised.

#1/18/13
-Made the .scene loader parse the name of a scene node for the trigger. It failed to completely parse the string if it was at the end of the < /> section, but worked when
	it was first. I'm not sure if this is a rapidxml error or mine. 
-Added a trigger action to activate a dynamic object. The pointer to the dynamic object is set through the dynamic object manager after the trigger is created. 

#1/21/13
-Created LookAt trigger, tested it to stop the elevator when looking at the sphere. 
-In the setLinkedObject() function for Trigger, the pointer didn't work when I used the void* version for a DynamicObject, and caused a segfault. Strange, I will have to
	be careful with void pointers. 

#1/23/13
-Made the flashlight increase/decrease attenuation when turned on and off. I am about to make a class for the flashlight since it will be a big item. Perhaps the outer 
	angle would be better to change than the attenuation range. 

#1/25/13
-Changed the flashlight to increase/decrease the outer angle of the spotlight instead. I think this looks better. 
-Created a WeaponNone class to be used when no weapon is equipped. This reduces having to call conditional functions in the main update loops. 
-I need to remember that parent destructors are always called, since they need to clean up any data used by the parent class. 
-Optimized the profile and inventory system. Weapons are switched via the numbers keys. Still need to add the ability to create new profiles from the menu with MyGUI. 
-The file loader in Profile checks the size of the file and compares it with the PROFILE_DATA struct size before loading to avoid overflow. 
-Created a new GUI system--the GUILayer. This abstract class is used to control child classes for individual layers in a game state. The menu state has a root layer and
	a new game layer for example (many more will be created). An int pointer is passed to the GUI layers and modified as needed by the layers to let the menu state
	update loop know if an action needs to be performed. The widgets are stored in a vector in each layer and are properly removed when it's destroyed. 

#1/26/13
-Changed the define macros for widget names to be static constants in each GUI layer class. 
-Created a stack for GUI layers in the menu state. 
-Created the load game GUI layer, with a listbox that allows the user to select a file and start from using that save file. The files are discovered with FindFirstFile
	using Win32 API. It is first checked that the compiler is using WIN32 with macros. 

#1/28/13
-Made all save files go to the "Saves" directory.
-Moved the GameState GUI into its own GUILayer. Added an overlay container stack to the GUILayer abstract class which is deleted with the delete function. For some reason
	the material for a container must be set before it's added to the overlay or else it seems you cannot set the material afterwards. 

#1/30/13
-Created a sub-state system for the GameState. The loop checks the sub-state and executes code accordingly. This is mainly used for loading screens, cutscenes (although
	cutscenes could be done by pushing a new state and then popping it), etc. Moved most of the code from enter() to the update loop inside the loading sub-state. 
-Modified a few misc. things--camera doesn't call init() in the constructor and it's done in GameState, as well as adding the camera to the viewport. 

#2/5/13
-Wrapped Bullet into a Physics class which is created when the game state is entered and no longer from the Base class. A pointer to the Physics class has to be passed
	around to some of the other classes as it's needed. No different that passing a pointer to the scene manager. 

#2/6/13
-Added the ability to load the next stage in game state. For some reason when I didn't recreate the scene manager, an assertion appeared on Root::renderOneFrame, but
	now I destroy and create the scene manager in STEP_FIRST when loading the next stage. 
-Moved the Profile singleton to a single class that's held in GameState. This simplifies debugging the random problems I was having with loading/saving. The inventory
	was previously a pointer and its address was written to the save file rather than the data, thus the weapons were corrupted. The inventory is no longer a pointer and
	works now.
-Added a SharedData singleton which can be used by anything as needed. Currently it is used for storing the name of the file to save/load when entering the game state. 
	
#2/7/13
-Messed around with water and made a few small optimizations.
-Going to add Hydrax next.

#2/9/13
-Put SkyX back in. Getting an error when compiling in release mode regarding _ITERTATOR_DEBUG_LEVEL preprocessor. 
-For some reason the debug directory for lib files was in the release configuration. I think this caused the release build to link against the debug library for SkyX
	and caused the errors. Thus, it would be wise to name all debug .lib files with a "_d" at the end. 

#2/13/13
-Added Hydrax support. I compiled the .lib files and .dll files with the Cmake projects. The debug build was linking against OgreMain.dll instead of OgreMain_d.dll
	and triggered a "OgreMain.dll" not found when running the game. I had to rebuild the debug files for Hydrax and fix the linker. 
-Hydrax has a bug where the edges of the water plane are clipped when using a scene node heiarchy for the camera. 

#2/18/13
-Fixed the Hydrax clipping error. Had to create another Ogre camera to pass into the Hydrax constructor and set its position and orientation manually based on the main
	camera, before Hydrax is updated each frame. This author of Hydrax stated that cameras attached to a scene node do not work with Hydrax 0.3 and up--so you have to 
	update the camera directly. This hack saved me from having to restructure the entire camera class. 
-Changed the BtOgre registerAllEntitiesAsColliders function to only add nodes that start with a '$' since this simplifies having to sort out collision objects in 
	large scene files. 
-I've tried modifying materials that inherit the diffuse_template (required for shadows and spotlights) and any new technique I introduce breaks the material. I may
	make a forum post eventually if I cannot figure it out. 

#2/20/13
-Fixed mesh texture mapping when exporting from Blender, see blender-notes.txt.
-For implementing an inherited material from diffuse_template, I need to use the name technique lighting to access that technique, otherwise the material gets broken if
	I don't use the name. 
-I can bypass having to use set_texture_alias and just get the technique passes manually. I can set the ambient_tex to a different one than the diffuse_tex, set ambient 
	lighting to max, and then use the flashlight to reveal the hidden diffuse texture. 
-Texture functions such as scrolling do not work in the inherited script as of now. This may be due to the shaders: http://www.ogre3d.org/forums/viewtopic.php?f=2&t=56317
-I can use the texture functions if I add another pass and a new texture_unit, however this does not follow the diffuse lighting. 
-So texture animations in materials do not work with the programmable pipeline, I have to use the texture_matrix auto param somewhere in the shader files for shadows.
*Fixed the texture animation issue. I had to add an extra parameter in the shader diffuse.cg (in SSAO folder from nullsquared), call texMat. I pass the texture_matrix
	into the shader in the diffuse.program file under vertex_program diffuse_vs cg{} under the default_params. I can then modify the texture_unit attributes and the 
	shader updates it ^_^. 
	This thread helped: http://www.ogre3d.org/forums/viewtopic.php?f=2&t=56317
--Here is the modified code for future reference:
-diffuse.cg
	VOut diffuse_vs(VIn IN,
		uniform float4x4 wMat,
		uniform float4x4 wvpMat,
		uniform float4x4 tvpMat,
		uniform float4x4 texMat,
		uniform float4 spotlightDir
	)
	{
		VOut OUT;
		OUT.wp = mul(wMat, IN.p);
		OUT.p = mul(wvpMat, IN.p);

		OUT.uv = mul(texMat, float4(IN.uv, 0, 1)).xy; // Proper updating of texture here

		OUT.n = mul(wMat, float4(IN.n, 0)).xyz; // world-space normal
		OUT.sdir = mul(wMat, spotlightDir).xyz; // spotlight dir in world space

		OUT.lp = mul(tvpMat, OUT.wp);

		return OUT;
	}

-diffuse.program
	vertex_program diffuse_vs cg
	{
		source diffuse.cg
		profiles vs_1_1 arbvp1
		entry_point diffuse_vs

		default_params
		{
			param_named_auto wMat world_matrix
			param_named_auto wvpMat worldviewproj_matrix
			param_named_auto tvpMat texture_viewproj_matrix 0
			param_named_auto texMat texture_matrix 0 // someone said they needed this in the vertex_program_ref in the .material file instead.
			param_named_auto spotlightDir light_direction_object_space 0
		}
	}
-Example material
	material LivingRoomFloorMat : diffuse_template
	{
		//set_texture_alias ambient_tex wood2A.jpg
		//set_texture_alias diffuse_tex wood2A.jpg

		technique lighting
		{
			pass
			{
				cull_hardware clockwise
			
				texture_unit ambient_tex
				{
					texture wood2A.jpg
				}
			}
		
			pass
			{
				texture_unit diffuse_tex
				{
					texture wood2A.jpg
					scroll_anim 0.5 0.5
				}
			}
		}
	}

#2/21/13
-Started adding objects to apartment scene, such as couch and bar stools. Had to remap the UV textures on the objects to get them to work
	with diffuse lighting. It will be tricky to do this to objects with multiple textures, perhaps I can UV map the parts separately or split
	the object into multiple objects. 
-Fixed a frame rate independence issue with camera movement. In the Camera::MoveFirstPerson() function I multiply the translation vector
	by timeSinceLastFrame and before that, instead of returning when the linear velocity is over the max, I reset the magnitude by normalizing
	the vector and multiplying it by the max velocity minus a const
	ant of 5.1 (it could be a bit less), which I don't know why it had to be 5.1, I'd expect 0.1 to work. 
	The Bullet physics update loop is using the time step so it doesn't make much sense that I have to do this. Bullet physics doesn't make much sense.  

#2/22/13
-Changed the physics collision adder to create complete meshes for objects that start with "$$" and a cylinder for "$@" and just the bounding box for "$". 
-Assert errors such as a "list is not dereferencable" can sometimes mean an error in the .material files, always check the Ogre log file.

#2/24/13
-See blender-notes.txt
Also applied the shader code changes to ambient.cg and ambient.program so the ambient_tex unit applies attributes. 

#2/25/13
-Made a createSceneManager function for GameState since the type of scene manager needed may vary for each stage. 
-Moved the stage loading code into LoadStage.cpp since it's going to take quite a bit of space.

#2/26/13
-Created a door dynamic object, the animation is hard-coded and somewhat messy, but it works. The origin of the door must be at the edge of it to rotate properly,
	and the mesh and scene exported from Blender when this is changed. 
-Added a findType() function to DynamicObjectManager to simplify the adding process. 

#3/1/13
-Got compositors organized and working. Testing gaussian blur and radial blur which will be good for the "glasses off" effect. I still need to figure out how to 
	change the intensity of the blur at run-time for more efficient in-game experience.
-For some reason the door update had to be reverted back to the DynamicObject function for the origin of the bounding box to be set correctly. Not sure why this happened
	but I believe it was after I exported the .scene again. 

#3/9/13
-Made the Door class abstract and now have RotatingDoor and SlidingDoor which initialize their animations as needed. 
-Made a loader for the doors which allows you to define in what direction it will translate. The math for this is good I think. This is done in Door::calculateOffset().
-Created a simple mechanism to use a switch with a door. The switch will send the override command and unlock the door, then send an action command which will
	open/close the door; that function returns and the door is locked again.

#3/11/13
-Added deleteData() function to DynamicObject, which frees the data pointer for each object if it exists. Polymorphism takes care of deleting certain types of data in
	the any pointer for the scene node. 

#3/13/13
-A billion compile errors could mean you forgot a semicolon at the end of a class definition because VC++ is retarded.
-Added Light which is a child of DynamicObject. This will be used for lights added to the scene (or I could use the Blender light objects). These Light objects can 
	be attached to a switch, set to flicker, etc.
-Still need to work out how to export it from blender. As of now I just use a cone as a placeholder. To get the direction I have to transform the orientation of the cone
	by the negative unit Y vector, which doesn't seem right (should be negative unit Z).

#3/16/13
-The flickering of the flashlight when backing away only happens in debug mode AFAIK. 
-I have a working light outside the hotel room window that lights the window and leaves little retarded looking stuff in the room. 
	The light code is as follows (deprecated): 
	<position y="5.117672" x="-93.296890" z="-7.701633" />
    <rotation qy="0.420888" qx="-0.570417" qz="0.417881" qw="0.568202" />
    <scale y="1.000000" x="1.000000" z="1.000000" />
	<light type="0" range="600" innerRange="5.0" outerRange="21.0" />

#3/18/13
-If Blender refuses to even show the option to export a .scene file, it could be a compile error in the python script. Run it from command line to see what the error is.
-It appears that in some cases to change a custom property int/float value for an object in Blender you must first set it to a string value and then back to an int/float.
-I have eliminated the need to manually edit the .scene files to add dynamic object data; it is all exported from Blender now. Under the object tab in Blender, the custom
	properties are set which are then exported by the python script (I had to edit it a bit, so it would name the XML nodes by the custom property name). Since only one
	value is allowed to be set per custom property, I simply use a single node for each piece of data needed.
	In export script at line 3635
	# Custom user props
        for prop in ob.items():
           propname, propvalue = prop
           if not propname.startswith('_'):
               user = doc.createElement(propname)
               o.appendChild( user )
               user.setAttribute( 'value', str(propvalue) )

-The data loading process has also been simplified in DotSceneLoader. 
-For some reason the base function for deleteData didn't work with the trigger, even though it's the same code.

#3/20/13
-Added a TextRenderer class which manages rendering of 2D text. The Text object defines what the text contains, the font, size, etc.
-Multiple text objects can be added. I still need to optimize the renderer for cleaning up data and organize it into a trigger system.  

#3/22/13
-Made the Text be able to center perfectly on the screen. This will be how it's used most of the time.
-Added ability to fade the text in and out using the absolute value of a sine wave. The TextRenderer singleton is updated each frame which then updates the Text objects.
-Changed the TextRenderer to use predefined locations on the screen, this will make it simpler than managing a list of text items. 

#3/23/13
-Fixed up some issues with the TextRenderer, mainly with the nullptrs and timeout. 
-I believe the reason I have to load the filler text first is because the font must be loaded at least once for any others to work. Not sure why.

#3/24/13
-Added Glasses class which simply switches a gaussian blur compositor on and off, it is held by the Player class.

#3/30/13
-Fixed a silly error with the hydrax update code in GameState trying to access SkyX without checking if it's initialised.
-Tried to add SSAO compositor but it isn't working even with the listener set up properly. 

#4/8/13
-Testing some performance in release mode, the frame drops to below 60 when using several spotlights with shadow FSAA set to 4 and texture size 1024 (num=4). However, 
	reduced FSAA to 0 and size to 256 and it seemed fine.
-Also, making these changes seems to reduce the ugly edges of the shadows--it's the texture size.
-Created more Light dynamic objects, got a PulseLight working, which uses a sine function to pulse the colour, which creates a fade effect.
-I was setting the inner/outer range of the Light object spotlight with radians and not degrees, so this screwed up the shadows.

#4/10/13
-Made a key binding functionality in the Settings class. It's just an array with enums to access each key. I don't think it needs to be more complicated by using
	std::map, etc. It works well enough, just need to add the ability to save it to a file and change them with an options menu. 
-So today I learned that if you want to get the typeid of a derived class you must dereference the pointer itself, i.e. typeid(*DynamicObjectPtr).
-Added the ability to "retrieve" a dynamic object. It's simply a boolean in the DynamicObject class, which is checked before allowing the player to retrieve it. Once
	it is retrieved, the scene node is destroyed, making it disappear, and it is removed from DynamicObjectManager's list (during its update loop, it checks a retrieved 
	flag, if it's set, removes it). The player function action() calls Player::processRetrieval(), which finds the object's typeid and carries out the needed action, such as
	adding to a counter in the inventory. 
-Created a counter for the MagicCubes in the inventory. Also added an encryption system, to help prevent potential run-time memory hacking. Every important value in the
	inventory has its own key. This key is saved in memory and used to encrypt and decrypt the value. Every time a value is accessed, its key is changed to a new random
	value and the value is encrypted with the new key. This can be improved upon later, but I think it's a fairly decent and simple system.

#4/11/13
-I could reduce the amount of times I pass the scene manager pointer by using getCreator() on a scene node. 
-Cleaned up misc. things.
-Added the function Player::spawn() which places the player at the location of the "PlayerSpawn" scene node. This scene node should be represented in Blender with a 
	cone, in which the point faces where the player will face. 

#4/12/13
-Added main menu music as a test. 
-Added a sound when the magic cubes are picked up. At first, I had it in the DynamicObject itself, but it gets deleted and therefor the Sound object is deleted and
	it never got played. So I put a Sound object in Player and the processRetrieval() function plays the sound. I may end up using a stack here if more sounds are needed
	and just allocate sounds in that function and push them on the stack. 

#4/13/13
-Strangley, while doing some tests in release mode, it crashed when loading the Apartment.scene for a second time in one run. I traced it to when it was loading the 
	rotating door (main entrance), and because it didn't have an offset value the data was unable to be retrieved. The DotSceneLoader had a function I made to parse a 
	Vector3 with commas in the string, and it was splitting a string into tokens that didn't exist. Strange that it only crashed in release mode, though.
-Been doing some optimizing of the camera's physics, so I made the camera class load the moveSpeed, maxVelocity, and mass from a simple config file for fast run-time 
	testing. 
-A moveSpeed of 2.0, maxVelocity of 4.0, and mass of 4.0 is a pretty solid camera setup for normal movement. Sprinting and stimming can increase the maxVelocity. This way,
	the player can still climb ramps when the speed is changed. 
-So when I was multiplying the camera movement vector by timeSinceLastFrame, it cancelled out the frame rate independence since the physics engine itself is updated
	with timeSinceLastFrame every frame. 
-I'm working through a number of different experiments to fix frame rate independence with the camera movement. 
- http://www.ogre3d.org/forums/viewtopic.php?f=2&t=67583 Bullet timestep
-Implemented an accumulator for the physics update like here: http://bulletphysics.org/Bullet/phpBB3/viewtopic.php?t=8802
	Seems to have fixed it a little, still I don't think it's perfectly frame rate independent. 
-Hour 12: Looked at this page http://bulletphysics.org/mediawiki-1.5.8/index.php/Scaling_The_World
	So I removed any scaling of the entire scene and scaled the size of the camera capsule down as well. I fixed the timestep to divide the timeSinceLastFrame by 1000
	to achieve the time in milliseconds properly (before I had it multiplying by 0.015f for some reason). This slowed down the simulation but the scaling made up for it,
	along with changing the values for gravity and the camera movement. This is a major improvement in the smoothness of the camera movement. There is still frame stuttering
	when the frame rate drops below 60, which I'm working on a solution for (note: http://www.bulletphysics.org/mediawiki-1.5.8/index.php/Code_Snippets). 

#4/14/12
-More optimizations of the camera physics. Made the physics class update the camera instead of GameState. The Physics object holds a data structure with pointers to the 
	needed info from the Camera class. 
-Added a tick callback for Bullet, which now limits the player's maximum speed internally, which is supposed to be much more efficient. 
-Also fixed the falling code to be more simple. It simply applies a downward force if there is a good distance from the player to the ground. This overrides the gravity
	which for some reason is not enough to bring the player capsule down in a realistic time frame. 

#TODO  
-TREASURE.
-Make raycast bullet range better--don't just stop the bullet after it reaches max range. Test if the object hit is out of range, and decrease damage or randomize hits etc.  
-Make bvhtri mesh update with animated NPCs (not trivial at all)
-Figure out how to make a proper point light that won't interfere with soft shadows. 
-Change the resource group loading...only load what's necessary for the current state. 
-Ladder climbing--use ground trigger or forward ray. 
-Fix weapon switching fire rate glitch. 
-For vectors that may become large, implement sorting and binary searching.  http://en.cppreference.com/w/cpp/algorithm/binary_search http://www.cplusplus.com/reference/algorithm/sort/